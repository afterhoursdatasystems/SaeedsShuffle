
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Regenerates a single creative handicap for a Level Up volleyball tournament.
 *
 * - regenerateLevelUpHandicap - A function that regenerates a single handicap.
 * - RegenerateLevelUpHandicapInput - The input type for the regenerateLevelUpHandicap function.
 * - RegenerateLevelUpHandicapOutput - The return type for the regenerateLevelUpHandicap function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ExistingHandicapSchema = z.object({
    level: z.number(),
    description: z.string(),
});

export const RegenerateLevelUpHandicapInputSchema = z.object({
  levelToRegenerate: z.number().describe('The specific level (2-5) for which to generate a new handicap.'),
  existingHandicaps: z.array(ExistingHandicapSchema).describe('An array of the other handicaps that are already in use for the other levels.'),
  gameType: z.string().describe('The type of game, e.g., "Level Up".'),
});

export type RegenerateLevelUpHandicapInput = z.infer<
  typeof RegenerateLevelUpHandicapInputSchema
>;

export const RegenerateLevelUpHandicapOutputSchema = z.object({
    level: z.number().describe('The level this new handicap applies to.'),
    description: z.string().describe('A brief, clear description of the newly generated handicap.'),
});

export type RegenerateLevelUpHandicapOutput = z.infer<
  typeof RegenerateLevelUpHandicapOutputSchema
>;

export async function regenerateLevelUpHandicap(
  input: RegenerateLevelUpHandicapInput
): Promise<RegenerateLevelUpHandicapOutput> {
  return regenerateLevelUpHandicapFlow(input);
}

const prompt = ai.definePrompt({
  name: 'regenerateLevelUpHandicapPrompt',
  input: {schema: RegenerateLevelUpHandicapInputSchema},
  output: {schema: RegenerateLevelUpHandicapOutputSchema},
  prompt: `You are an expert volleyball tournament director known for creating fun and engaging game rules.

  A user wants to regenerate a single handicap for their "{{gameType}}" tournament for Level {{levelToRegenerate}}.

  In this format, teams "level up" when they win. With each new level, they gain a new handicap that makes the game harder for them. The handicaps are NOT cumulative.

  Generate one unique and creative handicap specifically for Level {{levelToRegenerate}}. The difficulty should be appropriate for its level.

  To ensure the new rule is unique, here are the handicaps currently in use for the other levels. Do not generate a rule that is functionally similar to any of these:
  {{#each existingHandicaps}}
  - Level {{level}}: {{description}}
  {{/each}}
  
  The handicap should be suitable for a casual, co-ed beach volleyball setting. Make it fun and easy to understand.

  Return the new handicap as a single object with 'level' and 'description' fields. The level should be {{levelToRegenerate}}.`,
});

const regenerateLevelUpHandicapFlow = ai.defineFlow(
  {
    name: 'regenerateLevelUpHandicapFlow',
    inputSchema: RegenerateLevelUpHandicapInputSchema,
    outputSchema: RegenerateLevelUpHandicapOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    // Ensure the level is correctly assigned
    if (output) {
        output.level = input.levelToRegenerate;
    }
    return output!;
  }
);
